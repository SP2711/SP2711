# -*- coding: utf-8 -*-
"""dataset_classify.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/139r7WJ7ky7LoGZ6gizkqOazzWvXv37IR
"""

import pandas as pd
import numpy as np
import re
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Download NLTK stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("dark_pattern_dataset.csv")

df.info()

df.head()

print(df["label"].value_counts())

custom_stopwords = set(stopwords.words('english')) - {"only", "fast", "now", "hurry"}

# Text preprocessing function
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters
    words = text.split()
    words = [word for word in words if word not in custom_stopwords]  # Remove stopwords
    return " ".join(words)

# Check the column names in your DataFrame
print(df.columns)

# Assuming your column is named 'Phrase' and not 'phrase', update your code
df["cleaned_phrase"] = df["phrase"].apply(preprocess_text)  # Replace 'Phrase' with the actual column name from your dataset if needed

# Convert labels to numerical values
df["label"] = df["label"].map({"dark_pattern": 1, "recommendation": 0})

df.head()

# Split data into train & test sets
X_train, X_test, y_train, y_test = train_test_split(df["cleaned_phrase"], df["label"], test_size=0.2, random_state=42)

# Convert text to numerical features using TF-IDF
vectorizer = TfidfVectorizer(ngram_range=(1, 2), max_df=0.90, min_df=3, stop_words='english')  # Use unigrams + bigrams
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a Naïve Bayes classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Make predictions
y_pred = model.predict(X_test_tfidf)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

def classify_phrase(phrase):
    processed_phrase = preprocess_text(phrase)
    transformed_phrase = vectorizer.transform([processed_phrase])
    prob = model.predict_proba(transformed_phrase)[0]  # Get probabilities

    if prob[1] > 0.7:  # More confident it's a dark pattern
        return "Dark Pattern"
    elif prob[0] > 0.3:  # More confident it's a recommendation
        return "Recommendation"
    else:
        return "Uncertain – Needs Review"  # Helps catch misclassifications

# Example Predictions
new_phrases = [
    "Act fast! This deal won't last long!",
    "Customers also viewed these products"
]

for phrase in new_phrases:
    print(f"Phrase: '{phrase}' → Classification: {classify_phrase(phrase)}")